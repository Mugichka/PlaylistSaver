@page "/playlist"
@inject PlaylistSaver.Data.YoutubeService YoutubeService

    <div class="main">
        <form>
            <input type="url" class="form-control" aria-describedby="Playlist Link" placeholder="Playlist Link" @bind="url">
            <button type="button" class="btn btn-primary" @onclick="GetPlaylist">Submit</button>
            <button type="button" class="btn btn-primary" @onclick="Clear">Clear</button>
            <button type="button" class="btn btn-primary" @onclick="AddToDb">Add to Database</button>
            <h5>@txt</h5>
        </form>

        <h5>@count</h5>
        @if (vidsList != null)
        {
            foreach (var video in vidsList)
            {
                <div class="card-deck">
                    <div class="card">
                        <img src="@video.Thumbnails.HighResUrl" class="card-img-top" alt="...">
                        <div class="card-body">
                            <a href="@video.Url" class="card-title">@video.Title</a>
                            <p class="card-text">@video.Description</p>
                        </div>
                        <div class="card-footer">
                            <small class="text-muted">@video.Author</small>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

@code {
    //readonly YoutubeClient youtube = new YoutubeClient();
    string url;
    string txt;

    List<YoutubeExplode.Videos.Video> vidsList = new List<YoutubeExplode.Videos.Video>();
    int count = 0;
    async void GetPlaylist()
    {
        if (YoutubeService.ChekUrl(url))
        {


            await foreach (var video in YoutubeService.youtube.Playlists.GetVideosAsync(url))
            {
                vidsList.Add(video);
            }

        }
        else
        {
            txt = "invalid link";
        }
    }
    void Clear()
    {
        vidsList.Clear();
    }
    void AddToDb()
    {
        
    }
}